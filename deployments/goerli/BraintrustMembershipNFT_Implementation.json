{
  "address": "0x69F1A2fb696FCC0a56b16C2b5A1B2300B42f4986",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AddressZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientLockPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LockPeriodNotReached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "NftDoesNotBelongToBeneficiary",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "NoMembershipNftInWallet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlyRelayerAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "UserAlreadyMintedNFT",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDeposit",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "LockedDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NftMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelayer",
          "type": "address"
        }
      ],
      "name": "RelayerChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnlockedDepositWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLockedDepositByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTotalLockedDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "total",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTotalLockedDepositByAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "nftTokenTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "btrstAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "availableTimes",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getTotalUnlockedDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_btrstErc20",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_baseURL",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "availableTimeInSeconds",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lockedDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "btrstAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "newURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newRelayer",
          "type": "address"
        }
      ],
      "name": "setRelayer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "unlockedDeposits",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "nftTokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "btrstAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "available",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawalIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawLockedDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawUnlockedDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe53130c15e6715f0439e9b4aa448835d62901bb2a66d2e4474956d92d5156c84",
  "receipt": {
    "to": null,
    "from": "0x6C104B5A847dA440B0009C5C2D44006823d48214",
    "contractAddress": "0x69F1A2fb696FCC0a56b16C2b5A1B2300B42f4986",
    "transactionIndex": 43,
    "gasUsed": "5090747",
    "logsBloom": "0x
    "blockHash": "0x1bdf693d05087f858684948f4dd949a33b6d0f0adfe57b42dbaa13875045b713",
    "transactionHash": "0xe53130c15e6715f0439e9b4aa448835d62901bb2a66d2e4474956d92d5156c84",
    "logs": [
      {
        "transactionIndex": 43,
        "blockNumber": 7497749,
        "transactionHash": "0xe53130c15e6715f0439e9b4aa448835d62901bb2a66d2e4474956d92d5156c84",
        "address": "0x69F1A2fb696FCC0a56b16C2b5A1B2300B42f4986",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 65,
        "blockHash": "0x1bdf693d05087f858684948f4dd949a33b6d0f0adfe57b42dbaa13875045b713"
      }
    ],
    "blockNumber": 7497749,
    "cumulativeGasUsed": "11858099",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "de53d6750aedf4ff6d031b52857a76cf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientLockPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LockPeriodNotReached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"NftDoesNotBelongToBeneficiary\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"NoMembershipNftInWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyRelayerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"UserAlreadyMintedNFT\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDeposit\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"LockedDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NftMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelayer\",\"type\":\"address\"}],\"name\":\"RelayerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnlockedDepositWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLockedDepositByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalLockedDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalLockedDepositByAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"nftTokenTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"btrstAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"availableTimes\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getTotalUnlockedDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_btrstErc20\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_baseURL\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"availableTimeInSeconds\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lockedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btrstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRelayer\",\"type\":\"address\"}],\"name\":\"setRelayer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unlockedDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftTokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"btrstAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawLockedDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUnlockedDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"deposit(uint256,uint256,address)\":{\"params\":{\"amount\":\"The amount of $BTRST being deposited.\",\"beneficiary\":\"The beneficiary address.\",\"nftTokenId\":\"The braintrust membership NFT token ID of the beneficiary.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getLockedDepositByIndex(address,uint256)\":{\"params\":{\"_address\":\"The address to check.\",\"index\":\"The index in the array within `lockedDeposits`.\"},\"returns\":{\"_0\":\"The corresponding `nftTokenId`.\",\"_1\":\"The corresponding `btrstAmount`.\",\"_2\":\"The corresponding `available`.\"}},\"getTotalLockedDepositAmount(address)\":{\"params\":{\"_address\":\"The address to check.\"},\"returns\":{\"total\":\"The total locked deposits amount.\"}},\"getTotalLockedDepositByAddress(address)\":{\"params\":{\"_address\":\"The address to check.\"},\"returns\":{\"availableTimes\":\"The corresponding `available`s.\",\"btrstAmounts\":\"The corresponding `btrstAmount`s.\",\"nftTokenTokenIds\":\"The corresponding `nftTokenId`s.\"}},\"getTotalUnlockedDeposit(address)\":{\"params\":{\"_address\":\"The address to check.\"},\"returns\":{\"_0\":\"The total unlocked deposit.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"lock(uint256,uint256,address,uint256)\":{\"params\":{\"amount\":\"The amount of $BTRST being deposited.\",\"beneficiary\":\"The beneficiary address.\",\"nftTokenId\":\"The braintrust membership NFT token ID of the beneficiary.\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeMint(address)\":{\"params\":{\"to\":\"The beneficiary address to mint to.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setBaseURI(string)\":{\"params\":{\"newURI\":\"The new base URL value.\"}},\"setRelayer(address)\":{\"params\":{\"newRelayer\":\"The new relayer address value.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdrawLockedDeposit(uint256,uint256)\":{\"params\":{\"amount\":\"The amount of $BTRST being withdrawn.\",\"withdrawalIndex\":\"The index in the array within `lockedDeposits`.\"}},\"withdrawUnlockedDeposit(uint256)\":{\"params\":{\"amount\":\"The amount of $BTRST being withdrawn.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"baseURI()\":{\"notice\":\"The Membership NFT base URI`.\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"Enables a deposit of $BTRST ERC20 to this contract on behalf of a beneficiary. The cumulative deposit is used off-chain to determine a user's level. A deposit is only successful if the beneficiary's wallet already contains a braintrust membership NFT. This function is ideally called by the beneficiary, but ultimately anyone who calls it should have enough $BTRST, and should have already approved this contract to spend it. Business Rule? A deposit will only succeed if a beneficiary already has a membership NFT.\"},\"getLockedDepositByIndex(address,uint256)\":{\"notice\":\"Returns the locked deposit for a given wallet at a given index.\"},\"getTotalLockedDepositAmount(address)\":{\"notice\":\"Returns the total locked deposits for a given wallet.NOTE: intented for off-chain.\"},\"getTotalLockedDepositByAddress(address)\":{\"notice\":\"Returns the total locked deposits for a given wallet.NOTE: intented for off-chain.\"},\"getTotalUnlockedDeposit(address)\":{\"notice\":\"Returns the total unlocked deposits for a given wallet.\"},\"lock(uint256,uint256,address,uint256)\":{\"notice\":\"Enables a locked deposit of $BTRST ERC20 to this contract on behalf of a beneficiary. A locked deposit is different from an ordinary deposit mainly because it is frozen on this contract until the available time has elapsed. The cumulative deposit is used off-chain to determine a user's level. A locked deposit is only successful if a beneficiary's wallet already contains a braintrust membership NFT.\"},\"lockedDeposits(address,uint256)\":{\"notice\":\"Keyed by beneficiary wallet address, the associated Profiles. Each call to lockDeposit() function will add a new item in the Profile[] array for the given beneficiary.\"},\"relayer()\":{\"notice\":\"The relayer. Is an EOA that holds ETH which is used to pay gas for certain method calls.e.g `safeMint()`.\"},\"safeMint(address)\":{\"notice\":\"Mints a new NFT to a specified address.\"},\"setBaseURI(string)\":{\"notice\":\"Changes the NFT base URL to a new value.\"},\"setRelayer(address)\":{\"notice\":\"Changes the relayer address to a new one.\"},\"unlockedDeposits(address)\":{\"notice\":\"Keyed by beneficiary wallet address, the associated Profile data.\"},\"withdrawLockedDeposit(uint256,uint256)\":{\"notice\":\"Enables a user to transfer their locked $BTRST deposit to their wallet. This is only possible if available time has elapsed.\"},\"withdrawUnlockedDeposit(uint256)\":{\"notice\":\"Enables a user to transfer their $BTRST deposit to their wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BraintrustMembershipNFT.sol\":\"BraintrustMembershipNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x77c89f893e403efc6929ba842b7ccf6534d4ffe03afe31670b4a528c0ad78c0f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x315887e846f1e5f8d8fa535a229d318bb9290aaa69485117f1ee8a9a6b3be823\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x24b86ac8c005b8c654fbf6ac34a5a4f61580d7273541e83e013e89d66fbf0908\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate that the this implementation remains valid after an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x6e36e9b4b71de699c2f3f0d4e4d1aa0b35da99a26e8d5b91ef09ba234b4ef270\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x5331c8909221d9f9f3851cfadd5959d0873413a2c27e30e0f2fa234158c1c6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x016298e66a5810253c6c905e61966bb31c8775c3f3517bf946ff56ee31d6c005\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x798741e231b22b81e2dd2eddaaf8832dee4baf5cd8e2dbaa5c1dd12a1c053c4d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x09864aea84f01e39313375b5610c73a3c1c68abbdc51e5ccdd25ff977fdadf9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xea5339a7fff0ed42b45be56a88efdd0b2ddde9fa480dc99fef9a6a4c5b776863\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/BraintrustMembershipNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\n\\nimport \\\"./IBTRST.sol\\\";\\n\\ncontract BraintrustMembershipNFT is\\n    Initializable,\\n    ERC721Upgradeable,\\n    OwnableUpgradeable,\\n    UUPSUpgradeable\\n{\\n    using CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n    CountersUpgradeable.Counter private _tokenIdCounter;\\n\\n    /**\\n     * @notice The relayer. Is an EOA that holds ETH which is used to pay gas for certain method calls.e.g `safeMint()`.\\n     */\\n    address public relayer;\\n\\n    /**\\n     * @notice The Membership NFT base URI`.\\n     */\\n    string public baseURI;\\n\\n    /**\\n     * @notice The Braintrust ERC-20 token.\\n     */\\n\\n    IBTRST btrstErc20;\\n\\n    /**\\n     * @notice Keyed by beneficiary wallet address, the associated Profile data.\\n     */\\n    mapping(address => Profile) public unlockedDeposits;\\n\\n    /**\\n     * @notice Keyed by beneficiary wallet address, the associated Profiles.\\n     * Each call to lockDeposit() function will add a new item in the Profile[] array for the given beneficiary.\\n     */\\n    mapping(address => Profile[]) public lockedDeposits;\\n\\n    /**\\n     * @notice The details of a beneficiary's deposit.\\n     * @param nftTokenId The braintrust membership NFT of the beneficiary.\\n     * @param btrstAmount The amount of $BTRST.\\n     * @param available The time which deposit amount becomes unlocked in the case of a locked deposit.\\n     */\\n    struct Profile {\\n        uint256 nftTokenId;\\n        uint256 btrstAmount;\\n        uint256 available;\\n    }\\n\\n    //errors\\n    error OnlyRelayerAllowed();\\n    error NftDoesNotBelongToBeneficiary(\\n        uint256 nftTokenId,\\n        address beneficiary\\n    );\\n    error NoMembershipNftInWallet(address beneficiary);\\n    error LockPeriodNotReached();\\n    error InsufficientBalance();\\n    error TransferNotAllowed();\\n    error UserAlreadyMintedNFT(address to);\\n    error ZeroDeposit();\\n    error InsufficientLockPeriod();\\n    error AddressZero();\\n\\n    //events\\n    event NftMinted(address indexed sender, uint256 amount);\\n    event Deposited(address indexed sender, uint256 amount);\\n    event DepositLocked(\\n        address indexed sender,\\n        uint256 amount\\n    );\\n    event UnlockedDepositWithdrawn(address indexed sender, uint256 amount);\\n    event LockedDepositWithdrawn(\\n        address indexed sender,\\n        uint256 amount,\\n        uint256 index\\n    );\\n    event RelayerChanged(address oldRelayer, address newRelayer);\\n\\n    /**\\n     * @notice Used when only the relayer address is allowed to perform a call.\\n     */\\n    modifier onlyRelayer() {\\n        if (msg.sender != relayer) {\\n            revert OnlyRelayerAllowed();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    // standard oz function\\n    function initialize(\\n        address _relayer,\\n        address _btrstErc20,\\n        string memory _baseURL\\n    ) public initializer {\\n        __ERC721_init(\\\"Braintrust Membership NFT\\\", \\\"BNFT\\\");\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n\\n        setRelayer(_relayer);\\n        btrstErc20 = IBTRST(_btrstErc20);\\n        setBaseURI(_baseURL);\\n\\n        // NFT tokenID starts from 1\\n        _tokenIdCounter.increment();\\n    }\\n\\n    // standard oz function\\n    function _authorizeUpgrade(address newImplementation)\\n        internal\\n        override\\n        onlyOwner\\n    {}\\n\\n    /**\\n     * @notice Business Rule. Prevent NFT transfers across wallet.\\n     * @param from The source address.\\n     * @param to The destination address.\\n     * @param tokenId The braintrust membership NFT.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        // NFT cannot be transferred across wallets. Only mint is enabled.\\n        if (from != address(0)) {\\n            revert TransferNotAllowed();\\n        }\\n\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Changes the NFT base URL to a new value.\\n     * @param newURI The new base URL value.\\n     */\\n    function setBaseURI(string memory newURI) public onlyOwner {\\n        baseURI = newURI;\\n    }\\n\\n    /**\\n     * @notice Returns the baseURI string.\\n     * @return The base URI.\\n     */\\n    function _baseURI() internal view virtual override returns (string memory) {\\n        return baseURI;\\n    }\\n\\n    /**\\n     * @notice Changes the relayer address to a new one.\\n     * @param newRelayer The new relayer address value.\\n     */\\n    function setRelayer(address newRelayer) public onlyOwner {\\n        if (newRelayer == address(0)) {\\n            revert AddressZero();\\n        }\\n        address oldRelayer = relayer;\\n        relayer = newRelayer;\\n        emit RelayerChanged(oldRelayer, newRelayer);\\n    }\\n\\n    /**\\n     * @notice Mints a new NFT to a specified address.\\n     * @param to The beneficiary address to mint to.\\n     */\\n    function safeMint(address to) public onlyRelayer {\\n        if (balanceOf(to) > 0) {\\n            revert UserAlreadyMintedNFT(to);\\n        }\\n        uint256 tokenId = _tokenIdCounter.current();\\n        _tokenIdCounter.increment();\\n        _safeMint(to, tokenId);\\n        emit NftMinted(to, tokenId);\\n    }\\n\\n    /**\\n     * @notice Enables a deposit of $BTRST ERC20 to this contract on behalf of a beneficiary.\\n     * The cumulative deposit is used off-chain to determine a user's level. A deposit is only\\n     * successful if the beneficiary's wallet already contains a braintrust membership NFT.\\n     * This function is ideally called by the beneficiary, but ultimately anyone who calls it\\n     * should have enough $BTRST, and should have already approved this contract to spend it.\\n     * Business Rule? A deposit will only succeed if a beneficiary already has a membership NFT.\\n     * @param amount The amount of $BTRST being deposited.\\n     * @param nftTokenId The braintrust membership NFT token ID of the beneficiary.\\n     * @param beneficiary The beneficiary address.\\n     */\\n    function deposit(\\n        uint256 amount,\\n        uint256 nftTokenId,\\n        address beneficiary\\n    ) external {\\n        if (amount == 0) {\\n            revert ZeroDeposit();\\n        }\\n\\n        if (balanceOf(beneficiary) <= 0) {\\n            revert NoMembershipNftInWallet(beneficiary);\\n        }\\n\\n        if (ownerOf(nftTokenId) != beneficiary) {\\n            revert NftDoesNotBelongToBeneficiary(nftTokenId, beneficiary);\\n        }\\n\\n        // we only set nft id once, but increment deposit amount every time.\\n        // available is always left as 0, since there is no unlock time for unlocked deposits.\\n        if (unlockedDeposits[beneficiary].nftTokenId == 0) {\\n            unlockedDeposits[beneficiary].nftTokenId = nftTokenId;\\n        }\\n\\n        unlockedDeposits[beneficiary].btrstAmount += amount;\\n\\n        btrstErc20.transferFrom(msg.sender, address(this), amount);\\n        emit Deposited(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @notice Enables a locked deposit of $BTRST ERC20 to this contract on behalf of a beneficiary.\\n     * A locked deposit is different from an ordinary deposit mainly because it is frozen on this contract\\n     * until the available time has elapsed.\\n     * The cumulative deposit is used off-chain to determine a user's level. A locked deposit is only\\n     * successful if a beneficiary's wallet already contains a braintrust membership NFT.\\n     * @param amount The amount of $BTRST being deposited.\\n     * @param nftTokenId The braintrust membership NFT token ID of the beneficiary.\\n     * @param beneficiary The beneficiary address.\\n     */\\n    function lock(\\n        uint256 amount,\\n        uint256 nftTokenId,\\n        address beneficiary,\\n        uint256 availableTimeInSeconds\\n    ) external {\\n        // availableTimeInSeconds must be greater than 30 days.\\n        if (availableTimeInSeconds < 30 * 24 * 3600) {\\n            revert InsufficientLockPeriod();\\n        }\\n\\n        if (balanceOf(beneficiary) <= 0) {\\n            revert NoMembershipNftInWallet(beneficiary);\\n        }\\n\\n        // check that nft belongs to beneficiary\\n        if (ownerOf(nftTokenId) != beneficiary) {\\n            revert NftDoesNotBelongToBeneficiary(nftTokenId, beneficiary);\\n        }\\n\\n        uint256 available = availableTimeInSeconds + block.timestamp;\\n\\n        lockedDeposits[beneficiary].push(\\n            Profile(nftTokenId, amount, available)\\n        );\\n        btrstErc20.transferFrom(msg.sender, address(this), amount);\\n        emit DepositLocked(beneficiary, amount);\\n    }\\n\\n    /**\\n     * @notice Enables a user to transfer their $BTRST deposit to their wallet.\\n     * @param amount The amount of $BTRST being withdrawn.\\n     */\\n    function withdrawUnlockedDeposit(uint256 amount) external {\\n        // check if user has enough deposit, then they can withdraw\\n        if (amount > unlockedDeposits[msg.sender].btrstAmount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        unlockedDeposits[msg.sender].btrstAmount -= amount;\\n        btrstErc20.transferFrom(address(this), msg.sender, amount);\\n\\n        emit UnlockedDepositWithdrawn(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @notice Enables a user to transfer their locked $BTRST deposit to their wallet. This is only possible if available time has elapsed.\\n     * @param amount The amount of $BTRST being withdrawn.\\n     * @param withdrawalIndex The index in the array within `lockedDeposits`.\\n     */\\n    function withdrawLockedDeposit(uint256 amount, uint256 withdrawalIndex)\\n        external\\n    {\\n        // check that available time has reached for that withdrawal index\\n        if (\\n            block.timestamp <\\n            lockedDeposits[msg.sender][withdrawalIndex].available\\n        ) {\\n            revert LockPeriodNotReached();\\n        }\\n        // check if user has enough deposit, they can withdraw\\n        if (amount > lockedDeposits[msg.sender][withdrawalIndex].btrstAmount) {\\n            revert InsufficientBalance();\\n        }\\n\\n        lockedDeposits[msg.sender][withdrawalIndex].btrstAmount -= amount;\\n        uint256 len = lockedDeposits[msg.sender].length;\\n        // if btrstAmount is now zero, then delete it from mapping\\n        if (lockedDeposits[msg.sender][withdrawalIndex].btrstAmount == 0) {\\n            lockedDeposits[msg.sender][withdrawalIndex] = lockedDeposits[\\n                msg.sender\\n            ][len - 1];\\n            lockedDeposits[msg.sender].pop();\\n        }\\n\\n        btrstErc20.transferFrom(address(this), msg.sender, amount);\\n\\n        emit LockedDepositWithdrawn(msg.sender, amount, withdrawalIndex);\\n    }\\n\\n    /**\\n     * @notice Returns the total unlocked deposits for a given wallet.\\n     * @param _address The address to check.\\n     * @return The total unlocked deposit.\\n     */\\n    function getTotalUnlockedDeposit(address _address)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return unlockedDeposits[_address].btrstAmount;\\n    }\\n\\n    /**\\n     * @notice Returns the locked deposit for a given wallet at a given index.\\n     * @param _address The address to check.\\n     * @param index The index in the array within `lockedDeposits`.\\n     * @return The corresponding `nftTokenId`.\\n     * @return The corresponding `btrstAmount`.\\n     * @return The corresponding `available`.\\n     */\\n    function getLockedDepositByIndex(address _address, uint256 index)\\n        public\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        Profile memory _lockedDeposit = lockedDeposits[_address][index];\\n        return (\\n            _lockedDeposit.nftTokenId,\\n            _lockedDeposit.btrstAmount,\\n            _lockedDeposit.available\\n        );\\n    }\\n\\n    /**\\n     * @notice Returns the total locked deposits for a given wallet.\\n     *  @notice NOTE: intented for off-chain.\\n     * @param _address The address to check.\\n     * @return total The total locked deposits amount.\\n     */\\n    function getTotalLockedDepositAmount(address _address)\\n        public\\n        view\\n        returns (uint256 total)\\n    {\\n        uint256 len = lockedDeposits[_address].length;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            Profile memory _lockedDeposit = lockedDeposits[_address][i];\\n            total += _lockedDeposit.btrstAmount;\\n        }\\n\\n        return total;\\n    }\\n\\n    /**\\n     * @notice Returns the total locked deposits for a given wallet.\\n     *  @notice NOTE: intented for off-chain.\\n     * @param _address The address to check.\\n     * @return nftTokenTokenIds The corresponding `nftTokenId`s.\\n     * @return btrstAmounts The corresponding `btrstAmount`s.\\n     * @return availableTimes The corresponding `available`s.\\n     */\\n    function getTotalLockedDepositByAddress(address _address)\\n        public\\n        view\\n        returns (\\n            uint256[] memory nftTokenTokenIds,\\n            uint256[] memory btrstAmounts,\\n            uint256[] memory availableTimes\\n        )\\n    {\\n        uint256 len = lockedDeposits[_address].length;\\n        nftTokenTokenIds = new uint256[](len);\\n        btrstAmounts = new uint256[](len);\\n        availableTimes = new uint256[](len);\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            Profile memory _lockedDeposit = lockedDeposits[_address][i];\\n            nftTokenTokenIds[i] = _lockedDeposit.nftTokenId;\\n            btrstAmounts[i] = _lockedDeposit.btrstAmount;\\n            availableTimes[i] = _lockedDeposit.available;\\n        }\\n\\n        return (nftTokenTokenIds, btrstAmounts, availableTimes);\\n    }\\n}\\n\",\"keccak256\":\"0x04ff39428dc0fd8e852e1dec24b1ee46dc15434bd64ecaecf5ac17efec841a2e\",\"license\":\"MIT\"},\"contracts/IBTRST.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IBTRST {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function approve(address spender, uint256 rawAmount)\\n        external\\n        returns (bool);\\n\\n    function transfer(address dst, uint256 rawAmount) external returns (bool);\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 rawAmount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xa67be32ef64a4a34717279a8f5595bbb3a91be48bd1d3a010b01391c59ef3f8f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106102045760003560e01c80636bbeb3dc11610118578063a22cb465116100a0578063ca8c286b1161006f578063ca8c286b14610792578063cb70ffca146107d1578063e985e9c5146107fa578063f2fde38b14610837578063f48368381461086057610204565b8063a22cb465146106c6578063b88d4fde146106ef578063c40bd3ba14610718578063c87b56dd1461075557610204565b80638406c079116100e75780638406c079146105df5780638da5cb5b1461060a5780638dbdbe6d146106355780639176bf2a1461065e57806395d89b411461069b57610204565b80636bbeb3dc146105215780636c0360eb1461056057806370a082311461058b578063715018a6146105c857610204565b80633659cfe61161019b5780634f1ef2861161016a5780634f1ef2861461044b57806352d1902d1461046757806355f804b3146104925780636352211e146104bb5780636548e9bc146104f857610204565b80633659cfe6146103a757806340d097c3146103d057806342842e0e146103f95780634571e3a61461042257610204565b8063095ea7b3116101d7578063095ea7b3146102ed57806323b872dd146103165780632fc01f361461033f5780633554377c1461036857610204565b806301ffc9a71461020957806306e5d9e81461024657806306fdde0314610285578063081812fc146102b0575b600080fd5b34801561021557600080fd5b50610230600480360381019061022b9190613fbf565b610889565b60405161023d9190614007565b60405180910390f35b34801561025257600080fd5b5061026d600480360381019061026891906140b6565b61096b565b60405161027c93929190614105565b60405180910390f35b34801561029157600080fd5b5061029a6109b3565b6040516102a791906141d5565b60405180910390f35b3480156102bc57600080fd5b506102d760048036038101906102d291906141f7565b610a45565b6040516102e49190614233565b60405180910390f35b3480156102f957600080fd5b50610314600480360381019061030f91906140b6565b610a8b565b005b34801561032257600080fd5b5061033d6004803603810190610338919061424e565b610ba3565b005b34801561034b57600080fd5b50610366600480360381019061036191906141f7565b610c03565b005b34801561037457600080fd5b5061038f600480360381019061038a91906140b6565b610dcf565b60405161039e93929190614105565b60405180910390f35b3480156103b357600080fd5b506103ce60048036038101906103c991906142a1565b610e7d565b005b3480156103dc57600080fd5b506103f760048036038101906103f291906142a1565b611006565b005b34801561040557600080fd5b50610420600480360381019061041b919061424e565b611152565b005b34801561042e57600080fd5b5061044960048036038101906104449190614403565b611172565b005b61046560048036038101906104609190614513565b61138e565b005b34801561047357600080fd5b5061047c6114cb565b6040516104899190614588565b60405180910390f35b34801561049e57600080fd5b506104b960048036038101906104b491906145a3565b611584565b005b3480156104c757600080fd5b506104e260048036038101906104dd91906141f7565b6115a7565b6040516104ef9190614233565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a91906142a1565b611659565b005b34801561052d57600080fd5b50610548600480360381019061054391906142a1565b61176f565b60405161055793929190614105565b60405180910390f35b34801561056c57600080fd5b5061057561179a565b60405161058291906141d5565b60405180910390f35b34801561059757600080fd5b506105b260048036038101906105ad91906142a1565b611829565b6040516105bf91906145ec565b60405180910390f35b3480156105d457600080fd5b506105dd6118e1565b005b3480156105eb57600080fd5b506105f46118f5565b6040516106019190614233565b60405180910390f35b34801561061657600080fd5b5061061f61191c565b60405161062c9190614233565b60405180910390f35b34801561064157600080fd5b5061065c60048036038101906106579190614607565b611946565b005b34801561066a57600080fd5b50610685600480360381019061068091906142a1565b611c2e565b60405161069291906145ec565b60405180910390f35b3480156106a757600080fd5b506106b0611d3c565b6040516106bd91906141d5565b60405180910390f35b3480156106d257600080fd5b506106ed60048036038101906106e89190614686565b611dce565b005b3480156106fb57600080fd5b50610716600480360381019061071191906146c6565b611de4565b005b34801561072457600080fd5b5061073f600480360381019061073a91906142a1565b611e46565b60405161074c91906145ec565b60405180910390f35b34801561076157600080fd5b5061077c600480360381019061077791906141f7565b611e93565b60405161078991906141d5565b60405180910390f35b34801561079e57600080fd5b506107b960048036038101906107b491906142a1565b611efb565b6040516107c893929190614807565b60405180910390f35b3480156107dd57600080fd5b506107f860048036038101906107f39190614853565b61214a565b005b34801561080657600080fd5b50610821600480360381019061081c91906148ba565b6123fb565b60405161082e9190614007565b60405180910390f35b34801561084357600080fd5b5061085e600480360381019061085991906142a1565b61248f565b005b34801561086c57600080fd5b50610887600480360381019061088291906148fa565b612513565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061095457507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806109645750610963826129e3565b5b9050919050565b610132602052816000526040600020818154811061098857600080fd5b9060005260206000209060030201600091509150508060000154908060010154908060020154905083565b6060606580546109c290614969565b80601f01602080910402602001604051908101604052809291908181526020018280546109ee90614969565b8015610a3b5780601f10610a1057610100808354040283529160200191610a3b565b820191906000526020600020905b815481529060010190602001808311610a1e57829003601f168201915b5050505050905090565b6000610a5082612a4d565b6069600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a96826115a7565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe90614a0d565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b26612a98565b73ffffffffffffffffffffffffffffffffffffffff161480610b555750610b5481610b4f612a98565b6123fb565b5b610b94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8b90614a9f565b60405180910390fd5b610b9e8383612aa0565b505050565b610bb4610bae612a98565b82612b59565b610bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bea90614b31565b60405180910390fd5b610bfe838383612bee565b505050565b61013160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154811115610c80576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061013160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610cd39190614b80565b9250508190555061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033846040518463ffffffff1660e01b8152600401610d3a93929190614bb4565b6020604051808303816000875af1158015610d59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7d9190614c00565b503373ffffffffffffffffffffffffffffffffffffffff167fa3a81f23fd2c0385ca7d57bfd5744a57c7085899a6904271df40dfeb51857ab282604051610dc491906145ec565b60405180910390a250565b60008060008061013260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208581548110610e2757610e26614c2d565b5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050806000015181602001518260400151935093509350509250925092565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161415610f0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0390614cce565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610f4b612e55565b73ffffffffffffffffffffffffffffffffffffffff1614610fa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9890614d60565b60405180910390fd5b610faa81612eac565b61100381600067ffffffffffffffff811115610fc957610fc86142d8565b5b6040519080825280601f01601f191660200182016040528015610ffb5781602001600182028036833780820191505090505b506000612eb7565b50565b61012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461108e576040517f81316de100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061109982611829565b11156110dc57806040517fd1db990b0000000000000000000000000000000000000000000000000000000081526004016110d39190614233565b60405180910390fd5b60006110e961012d613025565b90506110f661012d613033565b6111008282613049565b8173ffffffffffffffffffffffffffffffffffffffff167ff2b290a76feb54be358b555507421d765609171aefa0646f109a653228ff81b88260405161114691906145ec565b60405180910390a25050565b61116d83838360405180602001604052806000815250611de4565b505050565b60008060019054906101000a900460ff161590508080156111a35750600160008054906101000a900460ff1660ff16105b806111d057506111b230613067565b1580156111cf5750600160008054906101000a900460ff1660ff16145b5b61120f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161120690614df2565b60405180910390fd5b60016000806101000a81548160ff021916908360ff160217905550801561124c576001600060016101000a81548160ff0219169083151502179055505b6112c06040518060400160405280601981526020017f427261696e7472757374204d656d62657273686970204e4654000000000000008152506040518060400160405280600481526020017f424e46540000000000000000000000000000000000000000000000000000000081525061308a565b6112c86130e7565b6112d0613140565b6112d984611659565b8261013060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061132482611584565b61132f61012d613033565b80156113885760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161137f9190614e64565b60405180910390a15b50505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff16141561141d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141490614cce565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661145c612e55565b73ffffffffffffffffffffffffffffffffffffffff16146114b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114a990614d60565b60405180910390fd5b6114bb82612eac565b6114c782826001612eb7565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff161461155b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155290614ef1565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b61158c613191565b8061012f90805190602001906115a3929190613eb0565b5050565b6000806067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611650576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164790614f5d565b60405180910390fd5b80915050919050565b611661613191565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156116c8576040517f9fabe1c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508161012e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f18f08848c5694a025f9966c34ff2367f32a1a8275663b282ee01f4338b0454908183604051611763929190614f7d565b60405180910390a15050565b6101316020528060005260406000206000915090508060000154908060010154908060020154905083565b61012f80546117a890614969565b80601f01602080910402602001604051908101604052809291908181526020018280546117d490614969565b80156118215780601f106117f657610100808354040283529160200191611821565b820191906000526020600020905b81548152906001019060200180831161180457829003601f168201915b505050505081565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561189a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189190615018565b60405180910390fd5b606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6118e9613191565b6118f3600061320f565b565b61012e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000831415611981576040517f56316e8700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061198c82611829565b116119ce57806040517ffbff01980000000000000000000000000000000000000000000000000000000081526004016119c59190614233565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166119ee836115a7565b73ffffffffffffffffffffffffffffffffffffffff1614611a485781816040517f94dccc1a000000000000000000000000000000000000000000000000000000008152600401611a3f929190615038565b60405180910390fd5b600061013160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415611add578161013160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001819055505b8261013160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254611b309190615061565b9250508190555061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401611b9793929190614bb4565b6020604051808303816000875af1158015611bb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bda9190614c00565b508073ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c484604051611c2191906145ec565b60405180910390a2505050565b60008061013260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050905060005b81811015611d3557600061013260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110611cd657611cd5614c2d565b5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050806020015184611d1f9190615061565b9350508080611d2d906150b7565b915050611c7a565b5050919050565b606060668054611d4b90614969565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7790614969565b8015611dc45780601f10611d9957610100808354040283529160200191611dc4565b820191906000526020600020905b815481529060010190602001808311611da757829003601f168201915b5050505050905090565b611de0611dd9612a98565b83836132d5565b5050565b611df5611def612a98565b83612b59565b611e34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2b90614b31565b60405180910390fd5b611e4084848484613442565b50505050565b600061013160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050919050565b6060611e9e82612a4d565b6000611ea861349e565b90506000815111611ec85760405180602001604052806000815250611ef3565b80611ed284613531565b604051602001611ee392919061513c565b6040516020818303038152906040525b915050919050565b6060806060600061013260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905090508067ffffffffffffffff811115611f6257611f616142d8565b5b604051908082528060200260200182016040528015611f905781602001602082028036833780820191505090505b5093508067ffffffffffffffff811115611fad57611fac6142d8565b5b604051908082528060200260200182016040528015611fdb5781602001602082028036833780820191505090505b5092508067ffffffffffffffff811115611ff857611ff76142d8565b5b6040519080825280602002602001820160405280156120265781602001602082028036833780820191505090505b50915060005b8181101561214157600061013260008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811061208857612087614c2d565b5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905080600001518683815181106120d9576120d8614c2d565b5b60200260200101818152505080602001518583815181106120fd576120fc614c2d565b5b602002602001018181525050806040015184838151811061212157612120614c2d565b5b602002602001018181525050508080612139906150b7565b91505061202c565b50509193909250565b62278d00811015612187576040517f274dabc000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061219283611829565b116121d457816040517ffbff01980000000000000000000000000000000000000000000000000000000081526004016121cb9190614233565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff166121f4846115a7565b73ffffffffffffffffffffffffffffffffffffffff161461224e5782826040517f94dccc1a000000000000000000000000000000000000000000000000000000008152600401612245929190615038565b60405180910390fd5b6000428261225c9190615061565b905061013260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405280868152602001878152602001838152509080600181540180825580915050600190039060005260206000209060030201600090919091909150600082015181600001556020820151816001015560408201518160020155505061013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330886040518463ffffffff1660e01b815260040161236293929190614bb4565b6020604051808303816000875af1158015612381573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123a59190614c00565b508273ffffffffffffffffffffffffffffffffffffffff167f0e041911d94da5e0afa748114f9258395533852df5a0c7202ec3534ca5b9b210866040516123ec91906145ec565b60405180910390a25050505050565b6000606a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612497613191565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415612507576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fe906151d2565b60405180910390fd5b6125108161320f565b50565b61013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061256557612564614c2d565b5b9060005260206000209060030201600201544210156125b0576040517fc0e9274d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020818154811061260257612601614c2d565b5b90600052602060002090600302016001015482111561264d576040517ff4d678b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8161013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106126a05761269f614c2d565b5b906000526020600020906003020160010160008282546126c09190614b80565b92505081905550600061013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600061013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061276357612762614c2d565b5b90600052602060002090600302016001015414156128ea5761013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001826127c89190614b80565b815481106127d9576127d8614c2d565b5b906000526020600020906003020161013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811061283957612838614c2d565b5b906000526020600020906003020160008201548160000155600182015481600101556002820154816002015590505061013260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806128b8576128b76151f2565b5b600190038181906000526020600020906003020160008082016000905560018201600090556002820160009055505090555b61013060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3033866040518463ffffffff1660e01b815260040161294a93929190614bb4565b6020604051808303816000875af1158015612969573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061298d9190614c00565b503373ffffffffffffffffffffffffffffffffffffffff167fd6ce4c672ad79c31e601d74634b2cf319118a6cce6c0713017425caebb3a81eb84846040516129d6929190615221565b60405180910390a2505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b612a5681613692565b612a95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a8c90614f5d565b60405180910390fd5b50565b600033905090565b816069600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16612b13836115a7565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080612b65836115a7565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612ba75750612ba681856123fb565b5b80612be557508373ffffffffffffffffffffffffffffffffffffffff16612bcd84610a45565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16612c0e826115a7565b73ffffffffffffffffffffffffffffffffffffffff1614612c64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5b906152bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415612cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccb9061534e565b60405180910390fd5b612cdf8383836136fe565b612cea600082612aa0565b6001606860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d3a9190614b80565b925050819055506001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612d919190615061565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612e50838383613774565b505050565b6000612e837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613779565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b612eb4613191565b50565b612ee37f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b613783565b60000160009054906101000a900460ff1615612f0757612f028361378d565b613020565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612f6f57506040513d601f19601f82011682018060405250810190612f6c919061539a565b60015b612fae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa590615439565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b8114613013576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300a906154cb565b60405180910390fd5b5061301f838383613846565b5b505050565b600081600001549050919050565b6001816000016000828254019250508190555050565b613063828260405180602001604052806000815250613872565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166130d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130d09061555d565b60405180910390fd5b6130e382826138cd565b5050565b600060019054906101000a900460ff16613136576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161312d9061555d565b60405180910390fd5b61313e61394e565b565b600060019054906101000a900460ff1661318f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131869061555d565b60405180910390fd5b565b613199612a98565b73ffffffffffffffffffffffffffffffffffffffff166131b761191c565b73ffffffffffffffffffffffffffffffffffffffff161461320d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613204906155c9565b60405180910390fd5b565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415613344576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333b90615635565b60405180910390fd5b80606a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516134359190614007565b60405180910390a3505050565b61344d848484612bee565b613459848484846139af565b613498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348f906156c7565b60405180910390fd5b50505050565b606061012f80546134ae90614969565b80601f01602080910402602001604051908101604052809291908181526020018280546134da90614969565b80156135275780601f106134fc57610100808354040283529160200191613527565b820191906000526020600020905b81548152906001019060200180831161350a57829003601f168201915b5050505050905090565b60606000821415613579576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061368d565b600082905060005b600082146135ab578080613594906150b7565b915050600a826135a49190615716565b9150613581565b60008167ffffffffffffffff8111156135c7576135c66142d8565b5b6040519080825280601f01601f1916602001820160405280156135f95781602001600182028036833780820191505090505b5090505b60008514613686576001826136129190614b80565b9150600a856136219190615747565b603061362d9190615061565b60f81b81838151811061364357613642614c2d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8561367f9190615716565b94506135fd565b8093505050505b919050565b60008073ffffffffffffffffffffffffffffffffffffffff166067600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614613764576040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61376f838383613b37565b505050565b505050565b6000819050919050565b6000819050919050565b61379681613067565b6137d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137cc906157ea565b60405180910390fd5b806138027f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b613779565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61384f83613b3c565b60008251118061385c5750805b1561386d5761386b8383613b8b565b505b505050565b61387c8383613c6f565b61388960008484846139af565b6138c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138bf906156c7565b60405180910390fd5b505050565b600060019054906101000a900460ff1661391c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139139061555d565b60405180910390fd5b8160659080519060200190613932929190613eb0565b508060669080519060200190613949929190613eb0565b505050565b600060019054906101000a900460ff1661399d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139949061555d565b60405180910390fd5b6139ad6139a8612a98565b61320f565b565b60006139d08473ffffffffffffffffffffffffffffffffffffffff16613067565b15613b2a578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026139f9612a98565b8786866040518563ffffffff1660e01b8152600401613a1b949392919061585f565b6020604051808303816000875af1925050508015613a5757506040513d601f19601f82011682018060405250810190613a5491906158c0565b60015b613ada573d8060008114613a87576040519150601f19603f3d011682016040523d82523d6000602084013e613a8c565b606091505b50600081511415613ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ac9906156c7565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050613b2f565b600190505b949350505050565b505050565b613b458161378d565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060613b9683613067565b613bd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bcc9061595f565b60405180910390fd5b6000808473ffffffffffffffffffffffffffffffffffffffff1684604051613bfd91906159bb565b600060405180830381855af49150503d8060008114613c38576040519150601f19603f3d011682016040523d82523d6000602084013e613c3d565b606091505b5091509150613c658282604051806060016040528060278152602001615aab60279139613e49565b9250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613cdf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613cd690615a1e565b60405180910390fd5b613ce881613692565b15613d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d1f90615a8a565b60405180910390fd5b613d34600083836136fe565b6001606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613d849190615061565b92505081905550816067600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4613e4560008383613774565b5050565b60608315613e5957829050613ea9565b600083511115613e6c5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ea091906141d5565b60405180910390fd5b9392505050565b828054613ebc90614969565b90600052602060002090601f016020900481019282613ede5760008555613f25565b82601f10613ef757805160ff1916838001178555613f25565b82800160010185558215613f25579182015b82811115613f24578251825591602001919060010190613f09565b5b509050613f329190613f36565b5090565b5b80821115613f4f576000816000905550600101613f37565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613f9c81613f67565b8114613fa757600080fd5b50565b600081359050613fb981613f93565b92915050565b600060208284031215613fd557613fd4613f5d565b5b6000613fe384828501613faa565b91505092915050565b60008115159050919050565b61400181613fec565b82525050565b600060208201905061401c6000830184613ff8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061404d82614022565b9050919050565b61405d81614042565b811461406857600080fd5b50565b60008135905061407a81614054565b92915050565b6000819050919050565b61409381614080565b811461409e57600080fd5b50565b6000813590506140b08161408a565b92915050565b600080604083850312156140cd576140cc613f5d565b5b60006140db8582860161406b565b92505060206140ec858286016140a1565b9150509250929050565b6140ff81614080565b82525050565b600060608201905061411a60008301866140f6565b61412760208301856140f6565b61413460408301846140f6565b949350505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561417657808201518184015260208101905061415b565b83811115614185576000848401525b50505050565b6000601f19601f8301169050919050565b60006141a78261413c565b6141b18185614147565b93506141c1818560208601614158565b6141ca8161418b565b840191505092915050565b600060208201905081810360008301526141ef818461419c565b905092915050565b60006020828403121561420d5761420c613f5d565b5b600061421b848285016140a1565b91505092915050565b61422d81614042565b82525050565b60006020820190506142486000830184614224565b92915050565b60008060006060848603121561426757614266613f5d565b5b60006142758682870161406b565b93505060206142868682870161406b565b9250506040614297868287016140a1565b9150509250925092565b6000602082840312156142b7576142b6613f5d565b5b60006142c58482850161406b565b91505092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6143108261418b565b810181811067ffffffffffffffff8211171561432f5761432e6142d8565b5b80604052505050565b6000614342613f53565b905061434e8282614307565b919050565b600067ffffffffffffffff82111561436e5761436d6142d8565b5b6143778261418b565b9050602081019050919050565b82818337600083830152505050565b60006143a66143a184614353565b614338565b9050828152602081018484840111156143c2576143c16142d3565b5b6143cd848285614384565b509392505050565b600082601f8301126143ea576143e96142ce565b5b81356143fa848260208601614393565b91505092915050565b60008060006060848603121561441c5761441b613f5d565b5b600061442a8682870161406b565b935050602061443b8682870161406b565b925050604084013567ffffffffffffffff81111561445c5761445b613f62565b5b614468868287016143d5565b9150509250925092565b600067ffffffffffffffff82111561448d5761448c6142d8565b5b6144968261418b565b9050602081019050919050565b60006144b66144b184614472565b614338565b9050828152602081018484840111156144d2576144d16142d3565b5b6144dd848285614384565b509392505050565b600082601f8301126144fa576144f96142ce565b5b813561450a8482602086016144a3565b91505092915050565b6000806040838503121561452a57614529613f5d565b5b60006145388582860161406b565b925050602083013567ffffffffffffffff81111561455957614558613f62565b5b614565858286016144e5565b9150509250929050565b6000819050919050565b6145828161456f565b82525050565b600060208201905061459d6000830184614579565b92915050565b6000602082840312156145b9576145b8613f5d565b5b600082013567ffffffffffffffff8111156145d7576145d6613f62565b5b6145e3848285016143d5565b91505092915050565b600060208201905061460160008301846140f6565b92915050565b6000806000606084860312156146205761461f613f5d565b5b600061462e868287016140a1565b935050602061463f868287016140a1565b92505060406146508682870161406b565b9150509250925092565b61466381613fec565b811461466e57600080fd5b50565b6000813590506146808161465a565b92915050565b6000806040838503121561469d5761469c613f5d565b5b60006146ab8582860161406b565b92505060206146bc85828601614671565b9150509250929050565b600080600080608085870312156146e0576146df613f5d565b5b60006146ee8782880161406b565b94505060206146ff8782880161406b565b9350506040614710878288016140a1565b925050606085013567ffffffffffffffff81111561473157614730613f62565b5b61473d878288016144e5565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61477e81614080565b82525050565b60006147908383614775565b60208301905092915050565b6000602082019050919050565b60006147b482614749565b6147be8185614754565b93506147c983614765565b8060005b838110156147fa5781516147e18882614784565b97506147ec8361479c565b9250506001810190506147cd565b5085935050505092915050565b6000606082019050818103600083015261482181866147a9565b9050818103602083015261483581856147a9565b9050818103604083015261484981846147a9565b9050949350505050565b6000806000806080858703121561486d5761486c613f5d565b5b600061487b878288016140a1565b945050602061488c878288016140a1565b935050604061489d8782880161406b565b92505060606148ae878288016140a1565b91505092959194509250565b600080604083850312156148d1576148d0613f5d565b5b60006148df8582860161406b565b92505060206148f08582860161406b565b9150509250929050565b6000806040838503121561491157614910613f5d565b5b600061491f858286016140a1565b9250506020614930858286016140a1565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061498157607f821691505b602082108114156149955761499461493a565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006149f7602183614147565b9150614a028261499b565b604082019050919050565b60006020820190508181036000830152614a26816149ea565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b6000614a89603e83614147565b9150614a9482614a2d565b604082019050919050565b60006020820190508181036000830152614ab881614a7c565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b6000614b1b602e83614147565b9150614b2682614abf565b604082019050919050565b60006020820190508181036000830152614b4a81614b0e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b8b82614080565b9150614b9683614080565b925082821015614ba957614ba8614b51565b5b828203905092915050565b6000606082019050614bc96000830186614224565b614bd66020830185614224565b614be360408301846140f6565b949350505050565b600081519050614bfa8161465a565b92915050565b600060208284031215614c1657614c15613f5d565b5b6000614c2484828501614beb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000614cb8602c83614147565b9150614cc382614c5c565b604082019050919050565b60006020820190508181036000830152614ce781614cab565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b6000614d4a602c83614147565b9150614d5582614cee565b604082019050919050565b60006020820190508181036000830152614d7981614d3d565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614ddc602e83614147565b9150614de782614d80565b604082019050919050565b60006020820190508181036000830152614e0b81614dcf565b9050919050565b6000819050919050565b600060ff82169050919050565b6000819050919050565b6000614e4e614e49614e4484614e12565b614e29565b614e1c565b9050919050565b614e5e81614e33565b82525050565b6000602082019050614e796000830184614e55565b92915050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000614edb603883614147565b9150614ee682614e7f565b604082019050919050565b60006020820190508181036000830152614f0a81614ece565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000614f47601883614147565b9150614f5282614f11565b602082019050919050565b60006020820190508181036000830152614f7681614f3a565b9050919050565b6000604082019050614f926000830185614224565b614f9f6020830184614224565b9392505050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000615002602983614147565b915061500d82614fa6565b604082019050919050565b6000602082019050818103600083015261503181614ff5565b9050919050565b600060408201905061504d60008301856140f6565b61505a6020830184614224565b9392505050565b600061506c82614080565b915061507783614080565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156150ac576150ab614b51565b5b828201905092915050565b60006150c282614080565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156150f5576150f4614b51565b5b600182019050919050565b600081905092915050565b60006151168261413c565b6151208185615100565b9350615130818560208601614158565b80840191505092915050565b6000615148828561510b565b9150615154828461510b565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006151bc602683614147565b91506151c782615160565b604082019050919050565b600060208201905081810360008301526151eb816151af565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600060408201905061523660008301856140f6565b61524360208301846140f6565b9392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006152a6602583614147565b91506152b18261524a565b604082019050919050565b600060208201905081810360008301526152d581615299565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000615338602483614147565b9150615343826152dc565b604082019050919050565b600060208201905081810360008301526153678161532b565b9050919050565b6153778161456f565b811461538257600080fd5b50565b6000815190506153948161536e565b92915050565b6000602082840312156153b0576153af613f5d565b5b60006153be84828501615385565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b6000615423602e83614147565b915061542e826153c7565b604082019050919050565b6000602082019050818103600083015261545281615416565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006154b5602983614147565b91506154c082615459565b604082019050919050565b600060208201905081810360008301526154e4816154a8565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615547602b83614147565b9150615552826154eb565b604082019050919050565b600060208201905081810360008301526155768161553a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006155b3602083614147565b91506155be8261557d565b602082019050919050565b600060208201905081810360008301526155e2816155a6565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061561f601983614147565b915061562a826155e9565b602082019050919050565b6000602082019050818103600083015261564e81615612565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006156b1603283614147565b91506156bc82615655565b604082019050919050565b600060208201905081810360008301526156e0816156a4565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061572182614080565b915061572c83614080565b92508261573c5761573b6156e7565b5b828204905092915050565b600061575282614080565b915061575d83614080565b92508261576d5761576c6156e7565b5b828206905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006157d4602d83614147565b91506157df82615778565b604082019050919050565b60006020820190508181036000830152615803816157c7565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006158318261580a565b61583b8185615815565b935061584b818560208601614158565b6158548161418b565b840191505092915050565b60006080820190506158746000830187614224565b6158816020830186614224565b61588e60408301856140f6565b81810360608301526158a08184615826565b905095945050505050565b6000815190506158ba81613f93565b92915050565b6000602082840312156158d6576158d5613f5d565b5b60006158e4848285016158ab565b91505092915050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60008201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b6000615949602683614147565b9150615954826158ed565b604082019050919050565b600060208201905081810360008301526159788161593c565b9050919050565b600081905092915050565b60006159958261580a565b61599f818561597f565b93506159af818560208601614158565b80840191505092915050565b60006159c7828461598a565b915081905092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000615a08602083614147565b9150615a13826159d2565b602082019050919050565b60006020820190508181036000830152615a37816159fb565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b6000615a74601c83614147565b9150615a7f82615a3e565b602082019050919050565b60006020820190508181036000830152615aa381615a67565b905091905056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207c38f6dcfa2edf6000099be00f101ca94e8f777be9179a0fb790f4e34e920af264736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "amount": "The amount of $BTRST being deposited.",
          "beneficiary": "The beneficiary address.",
          "nftTokenId": "The braintrust membership NFT token ID of the beneficiary."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getLockedDepositByIndex(address,uint256)": {
        "params": {
          "_address": "The address to check.",
          "index": "The index in the array within `lockedDeposits`."
        },
        "returns": {
          "_0": "The corresponding `nftTokenId`.",
          "_1": "The corresponding `btrstAmount`.",
          "_2": "The corresponding `available`."
        }
      },
      "getTotalLockedDepositAmount(address)": {
        "params": {
          "_address": "The address to check."
        },
        "returns": {
          "total": "The total locked deposits amount."
        }
      },
      "getTotalLockedDepositByAddress(address)": {
        "params": {
          "_address": "The address to check."
        },
        "returns": {
          "availableTimes": "The corresponding `available`s.",
          "btrstAmounts": "The corresponding `btrstAmount`s.",
          "nftTokenTokenIds": "The corresponding `nftTokenId`s."
        }
      },
      "getTotalUnlockedDeposit(address)": {
        "params": {
          "_address": "The address to check."
        },
        "returns": {
          "_0": "The total unlocked deposit."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "lock(uint256,uint256,address,uint256)": {
        "params": {
          "amount": "The amount of $BTRST being deposited.",
          "beneficiary": "The beneficiary address.",
          "nftTokenId": "The braintrust membership NFT token ID of the beneficiary."
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate that the this implementation remains valid after an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeMint(address)": {
        "params": {
          "to": "The beneficiary address to mint to."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setBaseURI(string)": {
        "params": {
          "newURI": "The new base URL value."
        }
      },
      "setRelayer(address)": {
        "params": {
          "newRelayer": "The new relayer address value."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdrawLockedDeposit(uint256,uint256)": {
        "params": {
          "amount": "The amount of $BTRST being withdrawn.",
          "withdrawalIndex": "The index in the array within `lockedDeposits`."
        }
      },
      "withdrawUnlockedDeposit(uint256)": {
        "params": {
          "amount": "The amount of $BTRST being withdrawn."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "baseURI()": {
        "notice": "The Membership NFT base URI`."
      },
      "deposit(uint256,uint256,address)": {
        "notice": "Enables a deposit of $BTRST ERC20 to this contract on behalf of a beneficiary. The cumulative deposit is used off-chain to determine a user's level. A deposit is only successful if the beneficiary's wallet already contains a braintrust membership NFT. This function is ideally called by the beneficiary, but ultimately anyone who calls it should have enough $BTRST, and should have already approved this contract to spend it. Business Rule? A deposit will only succeed if a beneficiary already has a membership NFT."
      },
      "getLockedDepositByIndex(address,uint256)": {
        "notice": "Returns the locked deposit for a given wallet at a given index."
      },
      "getTotalLockedDepositAmount(address)": {
        "notice": "Returns the total locked deposits for a given wallet.NOTE: intented for off-chain."
      },
      "getTotalLockedDepositByAddress(address)": {
        "notice": "Returns the total locked deposits for a given wallet.NOTE: intented for off-chain."
      },
      "getTotalUnlockedDeposit(address)": {
        "notice": "Returns the total unlocked deposits for a given wallet."
      },
      "lock(uint256,uint256,address,uint256)": {
        "notice": "Enables a locked deposit of $BTRST ERC20 to this contract on behalf of a beneficiary. A locked deposit is different from an ordinary deposit mainly because it is frozen on this contract until the available time has elapsed. The cumulative deposit is used off-chain to determine a user's level. A locked deposit is only successful if a beneficiary's wallet already contains a braintrust membership NFT."
      },
      "lockedDeposits(address,uint256)": {
        "notice": "Keyed by beneficiary wallet address, the associated Profiles. Each call to lockDeposit() function will add a new item in the Profile[] array for the given beneficiary."
      },
      "relayer()": {
        "notice": "The relayer. Is an EOA that holds ETH which is used to pay gas for certain method calls.e.g `safeMint()`."
      },
      "safeMint(address)": {
        "notice": "Mints a new NFT to a specified address."
      },
      "setBaseURI(string)": {
        "notice": "Changes the NFT base URL to a new value."
      },
      "setRelayer(address)": {
        "notice": "Changes the relayer address to a new one."
      },
      "unlockedDeposits(address)": {
        "notice": "Keyed by beneficiary wallet address, the associated Profile data."
      },
      "withdrawLockedDeposit(uint256,uint256)": {
        "notice": "Enables a user to transfer their locked $BTRST deposit to their wallet. This is only possible if available time has elapsed."
      },
      "withdrawUnlockedDeposit(uint256)": {
        "notice": "Enables a user to transfer their $BTRST deposit to their wallet."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 527,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 530,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2144,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2548,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 836,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_name",
        "offset": 0,
        "slot": "101",
        "type": "t_string_storage"
      },
      {
        "astId": 838,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_symbol",
        "offset": 0,
        "slot": "102",
        "type": "t_string_storage"
      },
      {
        "astId": 842,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_owners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 846,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_balances",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 850,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 856,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1698,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "151",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 509,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 806,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2584,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "301",
        "type": "t_struct(Counter)2151_storage"
      },
      {
        "astId": 2587,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "relayer",
        "offset": 0,
        "slot": "302",
        "type": "t_address"
      },
      {
        "astId": 2590,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "baseURI",
        "offset": 0,
        "slot": "303",
        "type": "t_string_storage"
      },
      {
        "astId": 2594,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "btrstErc20",
        "offset": 0,
        "slot": "304",
        "type": "t_contract(IBTRST)3423"
      },
      {
        "astId": 2600,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "unlockedDeposits",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_address,t_struct(Profile)2614_storage)"
      },
      {
        "astId": 2607,
        "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
        "label": "lockedDeposits",
        "offset": 0,
        "slot": "306",
        "type": "t_mapping(t_address,t_array(t_struct(Profile)2614_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Profile)2614_storage)dyn_storage": {
        "base": "t_struct(Profile)2614_storage",
        "encoding": "dynamic_array",
        "label": "struct BraintrustMembershipNFT.Profile[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBTRST)3423": {
        "encoding": "inplace",
        "label": "contract IBTRST",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Profile)2614_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BraintrustMembershipNFT.Profile[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Profile)2614_storage)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Profile)2614_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BraintrustMembershipNFT.Profile)",
        "numberOfBytes": "32",
        "value": "t_struct(Profile)2614_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2151_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 2150,
            "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Profile)2614_storage": {
        "encoding": "inplace",
        "label": "struct BraintrustMembershipNFT.Profile",
        "members": [
          {
            "astId": 2609,
            "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
            "label": "nftTokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2611,
            "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
            "label": "btrstAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2613,
            "contract": "contracts/BraintrustMembershipNFT.sol:BraintrustMembershipNFT",
            "label": "available",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}